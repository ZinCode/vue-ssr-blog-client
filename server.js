process.env.VUE_ENV = 'server'
const isProd = process.env.NODE_ENV === 'production'

const fs = require('fs')
const path = require('path')
const express = require('express')
const favicon = require('serve-favicon')
const compression = require('compression')
const serialize = require('serialize-javascript')
const resolve = file => path.resolve(__dirname, file)
//__dirname 表示当前执行脚本所在的目录。

const app = express()


let indexHTML // generated by html-webpack-plugin
let adminHTML // spa后台页面
let loginHTML // spa登陆页面
let renderer  // created from the webpack-generated server bundle
if (isProd) {
  // in production: create server renderer and index HTML from real fs
  renderer = createRenderer(fs.readFileSync(resolve('./dist/server/server-bundle.js'), 'utf-8'))
  indexHTML = parseIndex(fs.readFileSync(resolve('./dist/index.html'), 'utf-8'))
} else {
  // in development: setup the dev server with watch and hot-reload,
  // and update renderer / index HTML on file change.
  require('./build/setup-dev-server')(app, {
    bundleUpdated: bundle => {
      renderer = createRenderer(bundle)
    },
    indexUpdated: index => {
      indexHTML = parseIndex(index)
    },
    adminUpdated: index => {
      adminHTML = index
    },//关键点应该在这里
    loginUpdated: index => {
      loginHTML = index
    }
  })
}

function createRenderer(bundle) {
  // https://github.com/vuejs/vue/blob/next/packages/vue-server-renderer/README.md#why-use-bundlerenderer
  return require('vue-server-renderer').createBundleRenderer(bundle, {
    cache: require('lru-cache')({
      max: 1000,
      maxAge: 1000 * 60 * 15
    })
  })
}

function parseIndex(template) {
  const contentMarker = '<!-- APP -->'
  const i = template.indexOf(contentMarker)
  return {
    head: template.slice(0, i),
    tail: template.slice(i + contentMarker.length)
  }
}

//设置静态文件缓存时间
const serve = (path, cache) => express.static(resolve(path), {
  maxAge: cache && isProd ? 60 * 60 * 24 * 30 : 0
})
//可以使用express.static()中间件设定静态文件目录

app.use(compression({ threshold: 0 }))
//压缩中间件
app.use(favicon('./public/logo-48.png'))
//添加图标中间件

app.set('views', path.join(__dirname, 'dist'))
app.engine('.html', require('ejs').__express)
app.set('view engine', 'ejs')
//上面这些暂时先复制过来，具体怎么用还不知道

// app.use('/service-worker.js', serve('./dist/server/service-worker.js'))
app.use('/manifest.json', serve('./manifest.json'))
app.use('/server', serve('./dist/server'))
app.use('/static', serve('./dist/static'))
//app.use('/public', serve('./public'))
// 处理静态资源和入口文件 先这么理解




//从这里往下都是一样的
app.get(['/', '/articles', '/a/:id', '/a/:id/edit/', '/u/haha', '/u/:id/articles', '/people', '/drafts', '/write', '/d/:id', '/tags', '/t/:id', '/about/author', '/about/resume', '/s'], (req, res) => {
  //等路由确定了这里的渲染部分要改一下'
  if (!renderer) {
    return res.end('waiting for compilation... refresh in a moment.')
  }

  res.setHeader("Content-Type", "text/html");
  var s = Date.now()
  const context = { url: req.url }
  const renderStream = renderer.renderToStream(context)

  renderStream.once('data', () => {
    res.write(indexHTML.head)
  })

  renderStream.on('data', chunk => {
    res.write(chunk)
  })

  renderStream.on('end', () => {
    // embed initial store state
    if (context.initialState) {
      res.write(
        `<script>window.__INITIAL_STATE__=${
        serialize(context.initialState, { isJSON: true })
        }</script>`
      )
    }
    res.end(indexHTML.tail)
    console.log(`whole request: ${Date.now() - s}ms`)
  })

  renderStream.on('error', err => {
    if (err && err.code === '404') {
      res.status(404).end('404 | Page Not Found')
      return
    }
    // Render Error Page or Redirect
    res.status(500).end('Internal Error 500')
    console.error(`error during render : ${req.url}`)
    console.error(err)
  })
})
// app.get('/', (req, res) => {
//   res.redirect('/aaa/articles')
// })
//spa管理页面'
app.get(['/admin', '/admin/*'], (req, res) => {
  if (isProd) {
    res.render('admin.html')
  } else {
    res.send(adminHTML)
  }

})

//spa登陆页面
app.get(['/signin', '/signup'], (req, res) => {
  if (isProd) {
    res.render('login.html')
  } else {
    res.send(loginHTML)
  }

})

//是否考虑弄一个spa后台管理页面

//其他路由404
app.get('*', (req, res) => {
  //这里应该单独弄一个404页面
  //res.render('404.html')
  res.send('HTTP STATUS: 404')
})

const port = parseInt(process.env.LEANCLOUD_APP_PORT || 8080)
//原来是process.env.PORT 没有parseInt方法
app.listen(port, () => {
  console.log(`server started at http://localhost:${port}`)
})
